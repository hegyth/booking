const { Composer, Scenes, Markup } = require('telegraf');
const { Guest, Reservation, Room } = require('./db/models');

const startStep = new Composer();
startStep.on('text', async (ctx) => {
  try {
    ctx.wizard.state.data = {};
    // ctx.wizard.state.data.userName = ctx.message.from.username
    // ctx.wizard.state.data.firstName = ctx.message.from.first_name
    // ctx.wizard.state.data.lastName = ctx.message.from.last_name
    await ctx.replyWithHTML('<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è</b> \n <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Ä—Ç–µ–º</i>');
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

const titleStep = new Composer();
titleStep.on('text', async (ctx) => {
  try {
    ctx.wizard.state.data.firstName = ctx.message.text;
    await ctx.replyWithHTML('<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ </b>\n <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –î–º–∏—Ç—Ä–∏–µ–≤–∏—á</i>');
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

const dateStep = new Composer();
dateStep.on('text', async (ctx) => {
  try {
    ctx.wizard.state.data.middleName = ctx.message.text;
    await ctx.replyWithHTML('<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é </b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–ª–∫–æ–≤–Ω–∏–∫–æ–≤ </i>');
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

const middleStep = new Composer();
middleStep.on('text', async (ctx) => {
  try {
    ctx.wizard.state.data.lastName = ctx.message.text;
    await ctx.replyWithHTML('<b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—èüìÜ</b>\n <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–ì–ì–ì-–ú–ú-–î–î</i>');
    return ctx.wizard.next();
  } catch (e) {
    console.log(e);
  }
});

const wowStep3 = new Composer();
wowStep3.on('text', async (ctx) => {
  try {
    if ((/\d{4}-\d{2}-\d{2}/gi).test(ctx.message.text)) {
      ctx.wizard.state.data.birthday = ctx.message.text;
      await ctx.replyWithHTML('<b>–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏?üì± </b>\n <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 89991112233</i>');
      return ctx.wizard.next();
    }
    await ctx.replyWithHTML('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω–Ω—ã–µ ü§¨ </b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–ì–ì–ì-–ú–ú-–î–î</i>');
  } catch (e) {
    console.log(e);
  }
});

const lastStep4 = new Composer();
lastStep4.on('text', async (ctx) => {
  try {
    if ((/^\+?[8][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$/gi).test(ctx.message.text)) {
      ctx.wizard.state.data.phone = ctx.message.text;
      await ctx.replyWithHTML('<b>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞üìÜ </b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–ì–ì–ì-–ú–ú-–î–î</i>');
      return ctx.wizard.next();
    }
    await ctx.replyWithHTML('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω–Ω—ã–µ ü§¨ </b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 89991112233</i>');
  } catch (e) {
    console.log(e);
  }
});

const lastStep5 = new Composer();
lastStep5.on('text', async (ctx) => {
  try {
    if ((/\d{4}-\d{2}-\d{2}/gi).test(ctx.message.text)) {
      ctx.wizard.state.data.checkIN = ctx.message.text;
      await ctx.replyWithHTML('<b>–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ üìÜ </b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä:  –ì–ì–ì–ì-–ú–ú-–î–î </i>');
      return ctx.wizard.next();
    }
    await ctx.replyWithHTML('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω–Ω—ã–µ ü§¨ </b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–ì–ì–ì-–ú–ú-–î–î</i>');
  } catch (e) {
    console.log(e);
  }
});

const categoryStep = new Composer();
categoryStep.on('text', async (ctx) => {
  try {
    if ((/\d{4}-\d{2}-\d{2}/gi).test(ctx.message.text)) {
      ctx.wizard.state.data.checkOut = ctx.message.text;
      await ctx.replyWithHTML('<b>–ö–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–∞ –∂–µ–ª–∞–µ—Ç–µ </b>', Markup.inlineKeyboard([
        [Markup.button.callback('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ', 'standart')],
        [Markup.button.callback('–î–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π', 'twoPlace')],
        [Markup.button.callback('–õ—é–∫—Å', 'luxury')],
      ]));
      return ctx.wizard.next();
    }
    await ctx.replyWithHTML('<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω–Ω—ã–µ ü§¨ </b>\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: XXXX-XX-XX</i>');
  } catch (e) {
    console.log(e);
  }
});

const conditionStep = new Composer();
conditionStep.action('standart', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    ctx.wizard.state.data.category = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π';
    const roomPrice = await Room.findOne({
      where: {
        category: ctx.wizard.state.data.category,
      },
    });
    const wizardData = ctx.wizard.state.data;
    const date1 = new Date(wizardData.checkIN);
    const date2 = new Date(wizardData.checkOut);
    const timeDiff = Math.abs(date2.getTime() - date1.getTime());
    const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
    await ctx.replyWithHTML(`–ò–º—è:<b>${wizardData.firstName}</b>\n–§–∞–º–∏–ª–∏—è:<b>${wizardData.lastName}</b>\n–û—Ç—á–µ—Å—Ç–≤–æ:<b>${wizardData.middleName}</b>\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:<b>${wizardData.birthday}</b>\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:<b>${wizardData.phone}</b>\n–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:<b>${wizardData.checkIN}</b>\n–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:<b>${wizardData.checkOut}</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–º–µ—Ä–∞:<b>${wizardData.category}</b>\n\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:${roomPrice.price * (diffDays)}‚ÇΩ</b>`);
    await ctx.replyWithHTML('<i>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞üëç</i>');
    console.log(wizardData);
    const {
      firstName, middleName, lastName, birthday, phone, checkIN, checkOut, category,
    } = wizardData;
    const guest = await Guest.findOrCreate({
      where: {
        firstName, lastName, middleName, birthday, phone,
      },
    });

    await Reservation.create({
      checkIN, checkOut, guestId: guest[0].dataValues.id, category, bill: (roomPrice.price * (diffDays)), status: 'willBe',
    });
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
  }
});

conditionStep.action('twoPlace', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    ctx.wizard.state.data.category = '–î–≤—É—Ö–º–µ—Å—Ç–Ω—ã–π';
    const roomPrice = await Room.findOne({
      where: {
        category: ctx.wizard.state.data.category,
      },
    });
    const wizardData = ctx.wizard.state.data;
    const date1 = new Date(wizardData.checkIN);
    const date2 = new Date(wizardData.checkOut);
    const timeDiff = Math.abs(date2.getTime() - date1.getTime());
    const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
    await ctx.replyWithHTML(`–ò–º—è:<b>${wizardData.firstName}</b>\n–§–∞–º–∏–ª–∏—è:<b>${wizardData.lastName}</b>\n–û—Ç—á–µ—Å—Ç–≤–æ:<b>${wizardData.middleName}</b>\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:<b>${wizardData.birthday}</b>\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:<b>${wizardData.phone}</b>\n–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:<b>${wizardData.checkIN}</b>\n–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:<b>${wizardData.checkOut}</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–º–µ—Ä–∞:<b>${wizardData.category}</b>\n\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:${roomPrice.price * (diffDays)}‚ÇΩ</b>`);
    await ctx.replyWithHTML('<i>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞üëç</i>');
    console.log(wizardData);
    const {
      firstName, middleName, lastName, birthday, phone, checkIN, checkOut, category,
    } = wizardData;
    const guest = await Guest.findOrCreate({
      where: {
        firstName,
        lastName,
        middleName,
        birthday,
        phone,
      },
    });
    await Reservation.create({
      checkIN, checkOut, guestId: guest[0].dataValues.id, bill: (roomPrice.price * (diffDays)), status: 'willBe', category,
    });
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
  }
});

conditionStep.action('luxury', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    ctx.wizard.state.data.category = '–õ—é–∫—Å';
    const roomPrice = await Room.findOne({
      where: {
        category: ctx.wizard.state.data.category,
      },
    });
    const wizardData = ctx.wizard.state.data;
    const date1 = new Date(wizardData.checkIN);
    const date2 = new Date(wizardData.checkOut);
    const timeDiff = Math.abs(date2.getTime() - date1.getTime());
    const diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
    await ctx.replyWithHTML(`–ò–º—è:<b>${wizardData.firstName}</b>\n–§–∞–º–∏–ª–∏—è:<b>${wizardData.lastName}</b>\n–û—Ç—á–µ—Å—Ç–≤–æ:<b>${wizardData.middleName}</b>\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:<b>${wizardData.birthday}</b>\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:<b>${wizardData.phone}</b>\n–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:<b>${wizardData.checkIN}</b>\n–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:<b>${wizardData.checkOut}</b>\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–º–µ—Ä–∞:<b>${wizardData.category}</b>\n\n<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:${roomPrice.price * (diffDays)}‚ÇΩ</b>`);
    await ctx.replyWithHTML('<i>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞üëç</i>');
    console.log(wizardData);
    const {
      firstName, middleName, lastName, birthday, phone, checkIN, checkOut, category,
    } = wizardData;
    const guest = await Guest.findOrCreate({
      where: {

        firstName, lastName, middleName, birthday, phone,
      },
    });

    await Reservation.create({
      checkIN, checkOut, guestId: guest[0].dataValues.id, status: 'willBe', bill: (roomPrice.price * (diffDays)), category,
    });
    return ctx.scene.leave();
  } catch (e) {
    console.log(e);
  }
});

const vacancyScene = new Scenes.WizardScene('vacancyWizard', startStep, titleStep, dateStep, middleStep, wowStep3, lastStep4, lastStep5, categoryStep, conditionStep);
module.exports = vacancyScene;
